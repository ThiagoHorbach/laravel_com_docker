PASSO 1 PARA CRIAR O PROJETO LARAVEL:

criei a pasta e abri o terminal, rodei o comando abaixo:
    composer create-project laravel/laravel laravel-com-docker

isso fez com que criasse o projeto laravel na pasta laravel-com-docker.

depois disso, acesso a pasta laravel-com-docker
    cd laravel-com-docker

Instalo as dependências:
    npm install



Compilo os arquivos de front    
    npm run dev

com isso, o laravel vai estar funcionando sem o docker, agora vamos ao docker:

PASSO 2, CRIAR O DOCKER DO PROJETO E CONFIGURÁ-LO

Crio o dockerfile que coloquei na pasta do projeto
Crio o docker-compose.yml que também ja coloquei na pasta do projeto

depois rode o projeto criando o container:
    docker-compose up -d --build

no navegador acesse:
    localhost:8082

(Se estiver com erro de não ter a pasta vendor, acesse a pasta do projeto com o docker exec ali de baixo e rode este comando "composer install")

vá até docker/nginx/conf.d e crie o arquivo default.conf como o que criei

como não tinha o .env neste, criei e depois acessei a pasta com o código abaixo e rodei isso:
    php artisan key:generate

para acessar os locais do arquivo no docker digita isso no terminal:
    docker exec -it laravel_app_new_project bash
Para sair é só digitar
    exit

Exemplo de criação de uma controller com artisan
    php artisan make:controller ProductsController --resource

Exemplo de criação de arquivo request:
    php artisan make:request StoreOrUpdateProductsRequest

Para ver as rotas disponíveis, pode usar o comando
    php artisan route:list

MIGRATE

Para criar migrations(parte para banco de dados)
    php artisan make:migration products
Depois de ter criado as migrations, para rodar:
    php artisan migrate

Caso queira reverter uma migration:
    php artisan migrate:rollback

Caso queira ver o status das migrations:
    php artisan migrate:status

dropar todo o banco e criar novamente(normalmente não usar):
    php artisan migrate:fresh

Alteração de migration:
     php artisan make:migration add_stock_info_products_table --table=products
Depois das alterações adicionadas no arquivo, só rodar os migrate:
    php artisan migrate

se der o erro de faltar doctrine DBAL, roda dentro do docker como o php artisan por exemplo:
    composer require doctrine/dbal

MODEL:

para criar uma MODEL:
    php artisan make:model Products


VIEWS:

um modelo gratis de ambiente administrativo no laravel é o adminLTE 3
está no git: https://github.com/jeroennoten/Laravel-AdminLTE?tab=readme-ov-file
o passo a passo ta aqui: https://github.com/jeroennoten/Laravel-AdminLTE/wiki/Installation

php artisan make:component statusBadge

SISTEMA DE AUTENTICAÇÂO:

usar o laravel breeze que fica inclusive na documentação do proprio laravel
utilizar o comando:
    composer require laravel/breeze --dev
Instalar o breeze:
    php artisan breeze:install
        defina blade, não e phpunit
    roda o  npm install
    depois roda npm run dev

    VIEW DE AUTENTICAÇÃO DO LTE
        roda
            composer require laravel/ui
            php artisan ui bootstrap --auth
            php artisan adminlte:install --only=auth_views

criacao de APIs:
    php artisan make:controller ApiProductsController --resource

    as rotas não usam o arquivo web.php, mas sim o arquivo api.php


COMO FAZER O DEPLOY DE UM PROJETO LARAVEL:
    usar a ferramenta forge:
        forge.laravel.com/connect